openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /api/employees/{id}:
    get:
      tags:
      - employee-controller
      operationId: findEmployeeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeDto'
    put:
      tags:
      - employee-controller
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeDto'
    delete:
      tags:
      - employee-controller
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
  /api/roles:
    get:
      tags:
      - role-controller
      operationId: findAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
    post:
      tags:
      - role-controller
      description: creates a role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleCommand'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
  /api/employees:
    get:
      tags:
      - employee-controller
      operationId: employees
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'
    post:
      tags:
      - employee-controller
      description: creates an employee
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeDto'
  /api/roles/{id}:
    get:
      tags:
      - role-controller
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDto'
components:
  schemas:
    UpdateEmployeeRequest:
      type: object
      properties:
        name:
          type: string
          description: the name of the employee
          example: John Doe
        roleId:
          type: integer
          description: the id of the role of the employee
          format: int64
          example: 1
    EmployeeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        role:
          $ref: '#/components/schemas/RoleDto'
    RoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CreateRoleCommand:
      type: object
      properties:
        name:
          type: string
          description: the name of the new role
          example: John Doe
    CreateEmployeeRequest:
      type: object
      properties:
        name:
          type: string
          description: the name of the new employee
          example: John Doe
        roleId:
          type: integer
          description: the id of the role of the new employee
          format: int64
          example: 1
